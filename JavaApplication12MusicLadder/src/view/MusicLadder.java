/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.MusicLadderController;
import entity.Duel;
import entity.Song;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author root
 */
public class MusicLadder extends javax.swing.JFrame
{
    
    private MusicLadderController mlc = null;
    private List<Song> songs = null;
    private List<Duel> duels = null;
    private Duel currentDuel = null;

    /**
     * Creates new form MusicLadder
     */
    public MusicLadder()
    {
        initComponents();
        initSecondaryComponents();
    }
    
    private void initSecondaryComponents() {
        //Set GUI centered 
        this.setLocationRelativeTo( null );
        
        //Load Controller
        mlc = MusicLadderController.getInstance();
        
        //Load songs
        songs = mlc.getSongs();
        populatejTableSongs( songs );
        
        //Load Duels
        duels = mlc.getDuels( 5 );
        populatejTableDuels( duels );
        
        currentDuel = duels.get(0);
        Song song1 = mlc.getSongByID( currentDuel.getSong1ID() );
        Song song2 = mlc.getSongByID( currentDuel.getSong2ID() );
        
        jLabelSong1Name.setText( song1.getName() );
        jLabelSong2Name.setText( song2.getName() );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableSongs = new javax.swing.JTable();
        jSliderSong1 = new javax.swing.JSlider();
        jSliderSong2 = new javax.swing.JSlider();
        jLabelSong1Name = new javax.swing.JLabel();
        jLabelSong2Name = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableNextMatches = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablePreviousMatches = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButtonSaveResult = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Music Ladder");

        jTableSongs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String []
            {
                "Name", "Matches", "Wins", "Draws", "Loses", "ELO Rating"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableSongs);

        jSliderSong1.setMajorTickSpacing(1);
        jSliderSong1.setMaximum(10);
        jSliderSong1.setMinorTickSpacing(1);
        jSliderSong1.setPaintLabels(true);
        jSliderSong1.setPaintTicks(true);
        jSliderSong1.setValue(5);
        jSliderSong1.addMouseWheelListener(new java.awt.event.MouseWheelListener()
        {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
            {
                jSliderSong1MouseWheelMoved(evt);
            }
        });
        jSliderSong1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jSliderSong1MouseReleased(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt)
            {
                jSliderSong1MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                jSliderSong1MouseEntered(evt);
            }
        });
        jSliderSong1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jSliderSong1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jSliderSong1KeyReleased(evt);
            }
        });

        jSliderSong2.setMajorTickSpacing(1);
        jSliderSong2.setMaximum(10);
        jSliderSong2.setMinorTickSpacing(1);
        jSliderSong2.setPaintLabels(true);
        jSliderSong2.setPaintTicks(true);
        jSliderSong2.setValue(5);
        jSliderSong2.addMouseWheelListener(new java.awt.event.MouseWheelListener()
        {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
            {
                jSliderSong2MouseWheelMoved(evt);
            }
        });
        jSliderSong2.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jSliderSong2MouseReleased(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt)
            {
                jSliderSong2MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                jSliderSong2MouseEntered(evt);
            }
        });
        jSliderSong2.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSliderSong2StateChanged(evt);
            }
        });
        jSliderSong2.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jSliderSong2KeyReleased(evt);
            }
        });

        jLabelSong1Name.setMaximumSize(new java.awt.Dimension(200, 50));
        jLabelSong1Name.setMinimumSize(new java.awt.Dimension(200, 50));
        jLabelSong1Name.setPreferredSize(new java.awt.Dimension(200, 50));
        jLabelSong1Name.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jLabelSong1NameMouseClicked(evt);
            }
        });

        jLabelSong2Name.setMaximumSize(new java.awt.Dimension(200, 50));
        jLabelSong2Name.setMinimumSize(new java.awt.Dimension(200, 50));
        jLabelSong2Name.setPreferredSize(new java.awt.Dimension(200, 50));
        jLabelSong2Name.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jLabelSong2NameMouseClicked(evt);
            }
        });

        jTableNextMatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableNextMatches);

        jLabel1.setText("Next Matches :");

        jLabel2.setText("Previous Matches :");

        jTablePreviousMatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTablePreviousMatches);

        jLabel3.setText("Music Ladder");

        jButtonSaveResult.setText("Save Result");
        jButtonSaveResult.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonSaveResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(175, 175, 175)
                                .addComponent(jLabel3))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSliderSong1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelSong1Name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jSliderSong2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelSong2Name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jButtonSaveResult))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSong1Name, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSong2Name, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSliderSong1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSliderSong2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSaveResult)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
        );

        jLabelSong1Name.getAccessibleContext().setAccessibleName("jLabelSongName1");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSliderSong2StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSliderSong2StateChanged
    {//GEN-HEADEREND:event_jSliderSong2StateChanged

    }//GEN-LAST:event_jSliderSong2StateChanged

    private void jSliderSong2MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jSliderSong2MouseReleased
    {//GEN-HEADEREND:event_jSliderSong2MouseReleased
        JSlider jss1 = jSliderSong1;
        JSlider jss2 = jSliderSong2;
        jss1.setValue( 10 -jss2.getValue() );
    }//GEN-LAST:event_jSliderSong2MouseReleased

    private void jSliderSong1MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jSliderSong1MouseReleased
    {//GEN-HEADEREND:event_jSliderSong1MouseReleased
        JSlider jss1 = jSliderSong1;
        JSlider jss2 = jSliderSong2;
        jss2.setValue( 10 -jss1.getValue() );
    }//GEN-LAST:event_jSliderSong1MouseReleased

    private void jSliderSong2MouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jSliderSong2MouseEntered
    {//GEN-HEADEREND:event_jSliderSong2MouseEntered

    }//GEN-LAST:event_jSliderSong2MouseEntered

    private void jSliderSong1MouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jSliderSong1MouseEntered
    {//GEN-HEADEREND:event_jSliderSong1MouseEntered

    }//GEN-LAST:event_jSliderSong1MouseEntered

    private void jSliderSong1MouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jSliderSong1MouseExited
    {//GEN-HEADEREND:event_jSliderSong1MouseExited

    }//GEN-LAST:event_jSliderSong1MouseExited

    private void jSliderSong2MouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jSliderSong2MouseExited
    {//GEN-HEADEREND:event_jSliderSong2MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jSliderSong2MouseExited

    private void jSliderSong2MouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_jSliderSong2MouseWheelMoved
    {//GEN-HEADEREND:event_jSliderSong2MouseWheelMoved
        JSlider jss1 = jSliderSong1;
        JSlider jss2 = jSliderSong2;
        
        int notches = evt.getWheelRotation();
        if (notches < 0)
        {
            if ( jss2.getValue() <= 10 && jss1.getValue() >= 1 )
            {
                jss2.setValue( jss2.getValue() + 1 );
                jss1.setValue( jss1.getValue() - 1 );
            }
        } else
        {
            if ( jss2.getValue() >= 1 && jss1.getValue() <= 10 )
            {
                jss2.setValue( jss2.getValue() - 1 );
                jss1.setValue( jss1.getValue() + 1 );
            }
        }
    }//GEN-LAST:event_jSliderSong2MouseWheelMoved

    private void jSliderSong1MouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_jSliderSong1MouseWheelMoved
    {//GEN-HEADEREND:event_jSliderSong1MouseWheelMoved
        JSlider jss1 = jSliderSong1;
        JSlider jss2 = jSliderSong2;
        
        int notches = evt.getWheelRotation();
        if (notches < 0)
        {
            if ( jss2.getValue() <= 10 && jss1.getValue() >= 1 )
            {
                jss2.setValue( jss2.getValue() + 1 );
                jss1.setValue( jss1.getValue() - 1 );
            }
        } else
        {
            if ( jss2.getValue() >= 1 && jss1.getValue() <= 10 )
            {
                jss2.setValue( jss2.getValue() - 1 );
                jss1.setValue( jss1.getValue() + 1 );
            }
        }
    }//GEN-LAST:event_jSliderSong1MouseWheelMoved

    private void jSliderSong1KeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jSliderSong1KeyPressed
    {//GEN-HEADEREND:event_jSliderSong1KeyPressed

    }//GEN-LAST:event_jSliderSong1KeyPressed

    private void jSliderSong1KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jSliderSong1KeyReleased
    {//GEN-HEADEREND:event_jSliderSong1KeyReleased
        KeyEvent keyEvent = evt;
        Integer way = 0;
        JSlider jss1 = jSliderSong1;
        JSlider jss2 = jSliderSong2;
        
        if( keyEvent.getKeyCode() == 38 || keyEvent.getKeyCode() == 39 ) {
            way = 1;
        } else if ( keyEvent.getKeyCode() == 37 || keyEvent.getKeyCode() == 40 ) {
            way = -1;
        }
        
         if (way < 0)
        {
            if ( jss2.getValue() <= 10 && jss1.getValue() >= 0 )
            {   
                jss2.setValue( jss2.getValue() + 1 );
            }
        } else
        {
            if ( jss2.getValue() >= 0 && jss1.getValue() <= 10 )
            {
                jss2.setValue( jss2.getValue() - 1 );
            }
        }
    }//GEN-LAST:event_jSliderSong1KeyReleased

    private void jSliderSong2KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jSliderSong2KeyReleased
    {//GEN-HEADEREND:event_jSliderSong2KeyReleased
        KeyEvent keyEvent = evt;
        Integer way = 0;
        JSlider jss1 = jSliderSong1;
        JSlider jss2 = jSliderSong2;
        
        if( keyEvent.getKeyCode() == 38 || keyEvent.getKeyCode() == 39 ) {
            way = 1;
        } else if ( keyEvent.getKeyCode() == 37 || keyEvent.getKeyCode() == 40 ) {
            way = -1;
        }
        
         if (way < 0)
        {
            if ( jss1.getValue() <= 10 && jss2.getValue() >= 0 )
            {   
                jss1.setValue( jss1.getValue() + 1 );
            }
        } else
        {
            if ( jss1.getValue() >= 0 && jss2.getValue() <= 10 )
            {
                jss1.setValue( jss1.getValue() - 1 );
            }
        }
    }//GEN-LAST:event_jSliderSong2KeyReleased

    private void jLabelSong2NameMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jLabelSong2NameMouseClicked
    {//GEN-HEADEREND:event_jLabelSong2NameMouseClicked
        jTableSongs.getSelectionModel().clearSelection();
        String songName = jLabelSong2Name.getText();
        selectValueFromjTableSongs( songName );
    }//GEN-LAST:event_jLabelSong2NameMouseClicked

    private void jLabelSong1NameMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jLabelSong1NameMouseClicked
    {//GEN-HEADEREND:event_jLabelSong1NameMouseClicked
        jTableSongs.getSelectionModel().clearSelection();
        String songName = jLabelSong1Name.getText();
        selectValueFromjTableSongs( songName );
    }//GEN-LAST:event_jLabelSong1NameMouseClicked

    private void jButtonSaveResultActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveResultActionPerformed
    {//GEN-HEADEREND:event_jButtonSaveResultActionPerformed
        Integer song1Score = jSliderSong1.getValue();
        Integer song2Score = jSliderSong2.getValue();
        
        songs = mlc.saveDuel(currentDuel, song1Score, song2Score);
        populatejTableSongs( songs );
        
        Float song1BeforeMatchRating = null, song2BeforeMatchRating = null;
        
        tableMatrixLoop:
        for (int row = 0; row <= jTableSongs.getRowCount() - 1; row++) {

            for (int col = 0; col <= jTableSongs.getColumnCount() - 1; col++) {
                
                for (int i = 0; i < songs.size(); i++)
                {
                    if ( currentDuel.getSong1ID() == songs.get(i).getId() ) {
                        if ( songs.get(i).getName().equals(jTableSongs.getValueAt(row, col))) {
                            song1BeforeMatchRating = (Float) jTableSongs.getValueAt(row, 6);
                        }
                    }
                    
                    if ( currentDuel.getSong2ID() == songs.get(i).getId() ) {
                        if (songs.get(i).getName().equals(jTableSongs.getValueAt(row, col))) {
                            song2BeforeMatchRating = (Float) jTableSongs.getValueAt(row, 6);
                        }
                    }
                }
            }
        }
        
        currentDuel = new Duel(1231231, currentDuel.getSong1ID(), currentDuel.getSong2ID(), song1BeforeMatchRating, song2BeforeMatchRating);
    }//GEN-LAST:event_jButtonSaveResultActionPerformed
    
    private void selectValueFromjTableSongs( String songName ) {
        
        jTableSongs.setRowSelectionInterval(0, 0);
        
        tableMatrixLoop:
        for (int row = 0; row <= jTableSongs.getRowCount() - 1; row++) {

            for (int col = 0; col <= jTableSongs.getColumnCount() - 1; col++) {
                
                if (songName.equals(jTableSongs.getValueAt(row, col))) {
                    jTableSongs.setRowSelectionInterval(row, row);
                    break tableMatrixLoop;
                }
            }
        }
        
    }
    
    public static void clearTable(final JTable table)
    {
        for (int i = 0; i < table.getRowCount(); i++)
        {
            for (int j = 0; j < table.getColumnCount(); j++)
            {
                table.setValueAt("", i, j);
            }
        }
    }
    
    private void populatejTableSongs(List<Song> songs)
    {
        clearTable( jTableSongs );
        String[] friendsTableColumnNames = new String[]
        {
            "ID", "Name", "Matches", "Wins", "Draws", "Loses", "ELO Rating"
        };
        
        Object[][] data = new Object[songs.size()][7];
        for (int i = 0; i < songs.size(); i++)
        {
            Integer songID = songs.get(i).getId();
            String name = songs.get(i).getName();
            Integer matches = ( songs.get(i).getWins() + songs.get(i).getDraws() + songs.get(i).getLoses() );
            Integer wins = songs.get(i).getWins();
            Integer draws = songs.get(i).getDraws();
            Integer loses = songs.get(i).getLoses();
            Float eloRating = songs.get(i).getCurrentRating();

            data[i][0] = songID;
            data[i][1] = name;
            data[i][2] = matches;
            data[i][3] = wins;
            data[i][4] = draws;
            data[i][5] = loses;
            data[i][6] = eloRating;
        }
        
        jTableSongs.setModel(new DefaultTableModel(data, friendsTableColumnNames)
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        });

        jTableSongs.getColumnModel().getColumn(0).setPreferredWidth(2);
        jTableSongs.getColumnModel().getColumn(1).setPreferredWidth(300);
        jTableSongs.getColumnModel().getColumn(2).setPreferredWidth(5);
        jTableSongs.getColumnModel().getColumn(3).setPreferredWidth(2);
        jTableSongs.getColumnModel().getColumn(4).setPreferredWidth(2);
        jTableSongs.getColumnModel().getColumn(5).setPreferredWidth(2);
        jTableSongs.getColumnModel().getColumn(6).setPreferredWidth(50);
    }
    
    private void populatejTableDuels(List<Duel> duels) {
        clearTable( jTableNextMatches );
        
        String[] duelsTableColumnNames = new String[]
        {
            "ID", "Song 1 ID", "Rating Song 1", "Song 2 ID", "Rating Song 2", "..."
        };
        
        Object[][] data = new Object[duels.size()][6];
        for (int i = 0; i < duels.size(); i++)
        {
            Integer songID = duels.get(i).getDuelID();
            Integer song1ID = duels.get(i).getSong1ID();
            Float song1Rating = duels.get(i).getSong1BeforeMatchRating();
            Integer song2ID = duels.get(i).getSong2ID();
            Float song2Rating = duels.get(i).getSong2BeforeMatchRating();
            String others = "...";

            data[i][0] = songID;
            data[i][1] = song1ID;
            data[i][2] = song1Rating;
            data[i][3] = song2ID;
            data[i][4] = song2Rating;
            data[i][5] = others;
        }
        
        jTableNextMatches.setModel(new DefaultTableModel(data, duelsTableColumnNames)
        {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        });
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MusicLadder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MusicLadder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MusicLadder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MusicLadder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MusicLadder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSaveResult;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelSong1Name;
    private javax.swing.JLabel jLabelSong2Name;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSlider jSliderSong1;
    private javax.swing.JSlider jSliderSong2;
    private javax.swing.JTable jTableNextMatches;
    private javax.swing.JTable jTablePreviousMatches;
    private javax.swing.JTable jTableSongs;
    // End of variables declaration//GEN-END:variables
}
